/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.apl.sha.ers.struts.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;

import com.apl.sha.ers.exception.DataException;
import com.apl.sha.ers.exception.NonUniqueDataException;
import com.apl.sha.ers.model.Depot;
import com.apl.sha.ers.model.User;
import com.apl.sha.ers.struts.form.SetDepotForm;
import com.apl.sha.ers.util.BeanUtil;

/** 
 * MyEclipse Struts
 * Creation date: 01-11-2007
 * 
 * XDoclet definition:
 * @struts.action path="/setDepot" name="setDepotForm" input="/setDepot.jsp" scope="request" validate="true"
 * @struts.action-forward name="success" path="/getDepot.jsp"
 */
public class SetDepotAction extends BaseAction {
	private static final String cancelPath="/depot.jsp";
	private static final String errorTag="error";
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		if(isCancelled(request)) {
			return cancelHandle(mapping,request,cancelPath);
		}
		ActionForward actionForward=this.checkPriv(mapping, request, this.getClass().getSimpleName());
		if(actionForward!=null) return actionForward ;
		HttpSession session=request.getSession(false);
		User user=(User)session.getAttribute("user");
		SetDepotForm setDepotForm = (SetDepotForm) form;
		try {
			process.setDepot(convertFromForm(setDepotForm), user);
		} catch (NonUniqueDataException e) {
			ActionErrors errors = new ActionErrors();
			errors.add(errorTag, new ActionMessage("error.duplicate", this.getMessage(request, "depot.depotcode.displayname")));
			addErrors(request, errors);
			return mapping.getInputForward();
		} catch (DataException e) {
			 
		}
		try {
			session.getServletContext().setAttribute("alldepots", process.getDepots(""));
		} catch (DataException e) {
		}
		try {
			session.setAttribute("localdepots", process.getDepots(user.getLocation()));
		} catch (DataException e) {
		}
		return this.addForwardParameter(mapping.findForward(success),"depotcode",setDepotForm.getDepotcode());
	}
	
	private Depot convertFromForm(SetDepotForm form) {
		Depot depot=new Depot();
		/*depot.setId(form.getId());
		depot.setDepotcode(form.getDepotcode().toUpperCase());
		depot.setLocation(form.getLocation().toUpperCase());
		depot.setEname(form.getEname());
		depot.setCname(form.getCname());
		depot.setTel(form.getTel());
		depot.setEaddress(form.getEaddress());
		depot.setCaddress(form.getCaddress());
		depot.setContact(form.getContact());
		depot.setEmail(form.getEmail());*/
		BeanUtil.copyProperties(form, depot);
		depot.setDepotcode(form.getDepotcode().toUpperCase());
		depot.setLocation(form.getLocation().toUpperCase());
		return depot;
	}
}
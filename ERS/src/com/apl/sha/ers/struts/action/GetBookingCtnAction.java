/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.apl.sha.ers.struts.action;

import java.util.Iterator;
import java.util.Map;
import java.util.TreeMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.apl.sha.ers.exception.BookingException;
import com.apl.sha.ers.exception.ErrCode;
import com.apl.sha.ers.exception.NoDataException;
import com.apl.sha.ers.model.Booking;
import com.apl.sha.ers.model.BookingCtn;
import com.apl.sha.ers.model.User;
import com.apl.sha.ers.model.BookingDesc;
import com.apl.sha.ers.util.BeanUtil;

/** 
 * MyEclipse Struts
 * Creation date: 02-28-2007
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="success" path="/getCtnDist.jsp"
 */
public class GetBookingCtnAction extends BaseAction {
	/*
	 * Generated Methods
	 */
	private final static String showmessage ="showmessage";
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionForward actionForward=this.checkPriv(mapping, request, this.getClass().getSimpleName());
		if(actionForward!=null) return actionForward ;
		int blnumber=0;
		String svcname = "";
		String blockcode = "";
		try {
			blnumber=Integer.parseInt(request.getParameter("blnumber").trim());
		}catch(NumberFormatException e) {
			
			String b_blnumber = "";			
			b_blnumber = request.getParameter("blnumber").trim().toUpperCase();
			
			if(!b_blnumber.equalsIgnoreCase("")){
				if(b_blnumber.substring(0, 1).equalsIgnoreCase("0")){
					b_blnumber = b_blnumber.substring(1);
				}
			}
			
			int baby_exists = process.checkBabyBooking(b_blnumber);
			
			if (baby_exists==0){
				ActionErrors errors = new ActionErrors();
				errors.add("getBookingCtnError", new ActionMessage("babybooking.notreceived",new Object[] {request.getParameter("blnumber").trim()}));
				this.addErrors(request, errors);
			}
			else{
				ActionMessages messages=new ActionMessages();
				messages.add("getBookingCtnMSG",new ActionMessage("babybooking.received",new Object[] {request.getParameter("blnumber").trim()}));
				this.saveMessages(request, messages);
			}
			
			return mapping.findForward(showmessage);
			
			//return this.errorHandle(mapping, request, "errors.integer",new Object[] {getMessage(request, "booking.blnumber.displayname")});
		}
		HttpSession session=request.getSession();
		User user=getUser(request);
		Map ctnTypes=(Map)session.getServletContext().getAttribute("ctntypes");
		Booking booking=null;
		try {
			 booking=process.getBooking(blnumber,ctnTypes,user);
			 session.setAttribute("booking", booking);
			 
		} catch (NoDataException e) {
			return this.errorHandle(mapping, request, "error.object.notfound", new Object[] {getMessage(request, "booking.displayname"),blnumber});
		} catch (BookingException e) {
			if(e.getErrCode()==ErrCode.notOwnerBookingCode) {
				return this.errorHandle(mapping, request, "error.booking.notowner", new Object[] {blnumber});
			}else if(e.getErrCode()==ErrCode.unPassedBookingCode) {
				List descs = process.getBookingDesc(blnumber);
				String desctmp = "NEW";
				String commenttmp = "No Comments";
				String preasontmp = "No Pending Reasons";
				String preasontmp_detail = "";
				if (descs.size()>0){
					BookingDesc bdesctmp = (BookingDesc) descs.get(0);
					desctmp = bdesctmp.getSdesc();
					commenttmp = bdesctmp.getComments();
					preasontmp = bdesctmp.getP_reasons();
					
					if(!preasontmp.equalsIgnoreCase("No Pending Reasons"))
					{
						String[] preasons=preasontmp.split("#");
						int no ;
						for (int i = 0; i < preasons.length; i++) 
						{
							no = i + 1;
							preasontmp_detail = preasontmp_detail + "<br>" + no + ") " + process.getBookingPReason(Integer.parseInt(preasons[i]));
						}
					}
				}
				if(!preasontmp_detail.equalsIgnoreCase("")){preasontmp = preasontmp_detail;}
				
				return this.errorHandle(mapping, request, "error.booking.unpassed", new Object[] {blnumber, desctmp, commenttmp, preasontmp});
			}
		}
		
		Map allDepots=(Map)session.getServletContext().getAttribute("alldepots");
		request.setAttribute("depots", process.getDepots(booking,allDepots));
		
		session.setAttribute("bkgCtnGroup", getBookingCtnGroup(booking));
		return mapping.findForward(success);
	}
	
	
	/**
	 * 把箱子放入map：
	 * */
	private Map getBookingCtnGroup(Booking booking) {
		Map ctns=booking.getCtns();
		String depotCode="";
		String ctnCode="";
		int ctnQty=0;
		Map map=new TreeMap();
		BookingCtn nbc=null;
		for(Iterator it=ctns.keySet().iterator();it.hasNext();) {
			BookingCtn bc=(BookingCtn) ctns.get(it.next());
			if(depotCode.equals(bc.getDepotCode())&&ctnCode.equals(bc.getCtnCode())){ //same depot
				nbc.setCtnQty(nbc.getCtnQty()+bc.getCtnQty());
			}else if(depotCode.equals("")){ //Initialize 
				depotCode=bc.getDepotCode()==null?"":bc.getDepotCode();
				ctnCode=bc.getCtnCode()==null?"":bc.getCtnCode();
				nbc=(BookingCtn) BeanUtil.cloneBean(bc);
				//add by Bert
				map.put(depotCode+ctnCode, nbc);
			}else {
				map.put(depotCode+ctnCode, nbc);
				depotCode=bc.getDepotCode()==null?"":bc.getDepotCode();
				ctnCode=bc.getCtnCode()==null?"":bc.getCtnCode();
				nbc=(BookingCtn) BeanUtil.cloneBean(bc);
			}
		}
		map.put(depotCode+ctnCode, nbc);
		return map;
	}
	
	/* old code 
	private Map getBookingCtnGroup(Booking booking) {
		Map ctns=booking.getCtns();
		String depotCode="";
		String ctnCode="";
		int ctnQty=0;
		Map map=new TreeMap();
		BookingCtn nbc=null;
		for(Iterator it=ctns.keySet().iterator();it.hasNext();) {
			BookingCtn bc=(BookingCtn) ctns.get(it.next());
			if(depotCode.equals(bc.getDepotCode())&&ctnCode.equals(bc.getCtnCode())){ //same depot
				nbc.setCtnQty(nbc.getCtnQty()+bc.getCtnQty());
			}else if(depotCode.equals("")){ //Initialize 
				depotCode=bc.getDepotCode()==null?"":bc.getDepotCode();
				ctnCode=bc.getCtnCode()==null?"":bc.getCtnCode();
				nbc=(BookingCtn) BeanUtil.cloneBean(bc);
			}else {
				map.put(depotCode+ctnCode, nbc);
				depotCode=bc.getDepotCode()==null?"":bc.getDepotCode();
				ctnCode=bc.getCtnCode()==null?"":bc.getCtnCode();
				nbc=(BookingCtn) BeanUtil.cloneBean(bc);
			}
		}
		map.put(depotCode+ctnCode, nbc);
		return map;
	}*/
}
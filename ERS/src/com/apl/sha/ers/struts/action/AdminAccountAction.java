/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.apl.sha.ers.struts.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;

import com.apl.sha.ers.exception.DataException;
import com.apl.sha.ers.model.User;
import com.apl.sha.ers.model.UserGroup;
import com.apl.sha.ers.struts.form.SetUserForm;
import com.apl.sha.ers.util.BeanUtil;
import com.apl.sha.ers.util.DateUtil;

/** 
 * MyEclipse Struts
 * Creation date: 04-18-2007
 * 
 * XDoclet definition:
 * @struts.action path="/adminAccount" name="adminAccountForm" input="/adminAccount.jsp" scope="request" validate="true"
 * @struts.action-forward name="success" path="/adminAccount.jsp"
 */
public class AdminAccountAction extends BaseAction {
	private static final String cancelPath="/home.jsp";
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		if(isCancelled(request)) {
			return cancelHandle(mapping,request,cancelPath);
		}
		ActionForward actionForward=this.checkPriv(mapping, request, this.getClass().getSimpleName());
		if(actionForward!=null) return actionForward ;
		HttpSession session=request.getSession(false);
		SetUserForm setUserForm = (SetUserForm) form;
		User user=new User();
		User opsUser=getUser(request);
		

		
		/*if(setUserForm.getUserid()==0) {//add
			
		}else {//update
			
		}*/
		convertFromForm(setUserForm,user);
		
		if ( !user.getLocation().equalsIgnoreCase(opsUser.getLocation())){
			ActionErrors errors = new ActionErrors();
			errors.add("AdminAccountError", new ActionMessage("error.setaccount.wrongloc",new Object[] {user.getLocation()}));
			this.addErrors(request, errors);
			return mapping.getInputForward();
		}

		
//		User user=process.getUser(setUserForm.getUsername());
		try {
			user=process.setUser(user,opsUser);
		} catch (DataException e) {
		}
		ActionMessages messages=new ActionMessages();
		messages.add(ActionMessages.GLOBAL_MESSAGE,new ActionMessage("message.success.displayname"));
		this.addMessages(request, messages);
		return mapping.findForward(success);
	}
	private User convertFromForm(SetUserForm form,User user) {
		BeanUtil.copyProperties(form, user);
		user.setUsername(user.getUsername().toLowerCase());
		UserGroup userGroup=new UserGroup();
		userGroup.setGroupid(form.getUsergroup());
		user.setUsergroup(userGroup);
		user.setCreatetime(DateUtil.parse(form.getCreatetime(),"datetime"));
		user.setUpdatetime(DateUtil.parse(form.getUpdatetime(),"datetime"));
		return user;
	}
}
/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.apl.sha.ers.struts.action;

import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.jfree.chart.JFreeChart;

import com.apl.sha.ers.ERSChartFactory;
import com.apl.sha.ers.exception.DataException;
import com.apl.sha.ers.model.DepotCtn;
import com.apl.sha.ers.model.User;

/** 
 * MyEclipse Struts
 * Creation date: 03-19-2007
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 * @struts.action-forward name="success" path="/getDepotsCtns.jsp"
 */
public class GetDepotsCtnsAction extends BaseAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionForward actionForward=this.checkPriv(mapping, request, this.getClass().getSimpleName());
		if(actionForward!=null) return actionForward ;
		HttpSession session=request.getSession();
		List containers;
		User user=getUser(request);
		try {
			containers = process.getDepotsCtns(user);
		} catch (DataException e1) {
			return this.errorHandle(mapping, request, "error.object.notfound", new Object[] {"Depot"});
		}
		session.setAttribute("depotsctns",containers );
		session.setAttribute("chart", getPieChart(
				this.getMessage(request, "depots.containers.chart.title",new Object[] {user.getLocation()}),
				containers,
				session.getServletContext().getRealPath("/image/apl_chartlogo.gif"))	
				);
		return mapping.findForward(success);
	}
	
	private JFreeChart getPieChart(String title,List containers,String bgImagePath) {
//		Map map=new TreeMap();
//		int rowCount=0;
//		String tmpRow="";
//		Map depotCodes=new HashMap();
	/*	for(Iterator it=containers.iterator();it.hasNext();) {
			DepotCtn ctn=(DepotCtn)it.next();
			if(!tmpRow.equalsIgnoreCase(ctn.getCtnCode())) {
				tmpRow=ctn.getCtnCode();
				rowCount++;
			}
			depotCodes.put(ctn.getDepotCode(), 1);
//			map.put(ctn.getCtnCode()+","+ctn.getDepotCode(), ctn.getInitalQty());
		}*/
		
		int size=containers.size();
		Number[] data=new Number[size]; 
		Comparable[] rowkey=new Comparable[size]; 
		Comparable[] colkey=new Comparable[size];
		int i=0;
		for(Iterator it=containers.iterator();it.hasNext();) {
			DepotCtn ctn=(DepotCtn)it.next();
			rowkey[i]=ctn.getCtnCode();
			colkey[i]=ctn.getDepotCode();
			data[i]=ctn.getInitalQty()-ctn.getPickupedQty()-ctn.getReservedQty();
			i++;
		}
		if(ERSChartFactory.getBackgroundimage()==null) {
			ERSChartFactory.setBackgroundimage(bgImagePath);
		}
		JFreeChart chart=ERSChartFactory.createMultiplePie3DChart(title, rowkey, colkey, data);
		
		return chart;
	}
	
	private JFreeChart getBarChart(String title,Map containers,String categoryaxis, String valueaxis, String bgImagePath,String remain,String reserved, String pickuped) {
		int size=containers.size()*3;
		Number[] data=new Number[size]; 
		Comparable[] rowkey=new Comparable[size]; 
		Comparable[] colkey=new Comparable[size];
		int i=0;
		for(Iterator it=containers.keySet().iterator();it.hasNext();) {
			String key=(String)it.next();
			DepotCtn ctn=(DepotCtn)containers.get(key);
			rowkey[i]=remain;
			colkey[i]=key;
			data[i]=ctn.getInitalQty()-ctn.getPickupedQty()-ctn.getReservedQty();
			rowkey[++i]=reserved;
			colkey[i]=key;
			data[i]=ctn.getReservedQty();
			rowkey[++i]=pickuped;
			colkey[i]=key;
			data[i]=ctn.getPickupedQty();
			i++;
		}
		if(ERSChartFactory.getBackgroundimage()==null) {
			ERSChartFactory.setBackgroundimage(bgImagePath);
		}
		JFreeChart chart=ERSChartFactory.createStackedBar3DChart(title,categoryaxis,valueaxis, data, rowkey, colkey);
		return chart;
	}
}